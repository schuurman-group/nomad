#!/usr/bin/env python
"""
Script used to extract data from nomad output files.
"""
import os
import sys
import numpy as np
import nomad.math.constants as constants
import nomad.core.glbl as glbl
import nomad.core.log as log
import nomad.core.checkpoint as checkpoint
import nomad.core.wavefunction as wavefunction
import nomad.core.matrices as matrices
import nomad.integrals.integral as integral

wfn0  = None
print_error = True
chkpt_file = None
#
def main():
    """Runs the main nomad_extract routine."""
    global print_error, wfn0, chkpt_file

    chkpt_file, time, data = process_arguments(sys.argv)

    # set the read time: here, there are 3 options:
    # time = None, -1, t, where these return: data
    # at all times, data at last time, data  at time
    # t. In checkpoint, time is either None (current
    # time) or t (specific time)
    read_time = None
    if time is not None and time != -1:
        read_time = time

    # read t=0 wfn to determine autocorrelation function
    [wfn0, ints0] = checkpoint.retrieve_simulation(time=0., file_name=chkpt_file, key_words=True)
    if wfn0 is None and data['-auto']:
        print("Cannot construct autocorrelation function: missing t=0 wavefunction\n")

    # generate output formats
    log.generate_formats()

    # if this is a vibronic model, we need to load the vibronic Hamiltonian in order
    # to evaluate the integrals
    if glbl.methods['interface'] == 'vibronic':
        glbl.modules['interface']  = __import__('nomad.interfaces.vibronic',
                                                fromlist=['NA'])
        glbl.modules['interface'].init_interface()

    # get printing machine ready
    checkpoint.generate_data_formats()

    # extract the time-indpendent/time-irregular information
    extract_logs(data)

    if time is None:
        tvals = checkpoint.time_steps(file_name=chkpt_file)
    else:
        tvals = [read_time]

    # try reading last time -- if anything fails, read up to the penultimate
    # time, i.e. we grabbed this checkpoint file during a write
    # status = chk_last_write(tvals[-1])
    status = True
    for i in range(len(tvals)):
        print_error = i==0

        # skip the occasional duplicated entry related to restart
        if i>0 and abs(tvals[i]-tvals[i-1])<constants.fpzero:
            continue
        [wfn, ints] = checkpoint.retrieve_simulation(time=tvals[i], file_name=chkpt_file)

        # This is a hack
        if ints is not None:
            if glbl.methods['integral_eval'] == 'lvc_exact':
                ints.ints.init_parameters(glbl.properties['crd_widths'])
        # end hack         
 
        if wfn is not None:     # successfully extracted a wfn object

            # if we didn't save matrices, but have ability to
            # regenerate them, do so here
            if len(wfn.matrices.avail()) == 0 and ints is not None:
                mat = matrices.Matrices()
                if ints is not None:
                    mat.build(wfn, ints)
                wfn.update_matrices(mat)

            extract_data(wfn, ints, data)
        else:
            print("could not extract wfn for time="+str(tvals[i]))

#-------------------------------------------------------------------------------------

def chk_read(time):
    """try reading at time, if anything fails, return False"""
    return True


def process_arguments(args):
    """Processes the command line arguments.

    Determine what data to extract from the checkpoint file, and where
    to put it.
    """
    # a list of valid arguments and the default values
    data_lst = {'-all':False,
                '-energy':False,
                '-pop':False,
                '-auto':False,
                '-spawn':False,
                '-matrices':False,
                '-trajectories':False,
                '-interface_data':False,
                '-integrals':'bra_ket_averaged'}

    # this defaults to extracting data at all times
    time = None

    if len(args) == 0:
        raise ValueError('input file not specified')

    chkpt_file = args[1]

    if not os.path.isfile(chkpt_file):
        raise ValueError('input file: '+str(chkpt_file)+' not found')

    iarg = 2
    while iarg < len(args):
        arg_val = args[iarg].strip()

        # just skip unrecognized commands
        if arg_val not in data_lst:
            print('argument: '+str(arg_val)+' not recognized. Skipping...')
            continue
        elif arg_val == '-time':
            time = float(args[iarg+1])
            iarg += 1
        elif arg_val == '-integrals':
            data_lst[arg_val] = str(args[iarg+1])
            iarg += 1
        else:
            data_lst[arg_val] = True

        iarg += 1

    return chkpt_file, time, data_lst

def extract_logs(dlst):
    """extracts information from checkpoint that is not uniform in time,
       generally extracted just once for a simulation"""

    if '-all' in dlst or '-spawn' in dlst:
        extract_spawn()   


def extract_data(wfn, ints, dlst):
    """extracts 'data' from checkpoint. Data is updated regularly/every time
       step."""
    global print_error

    if '-all' in dlst or '-energy' in dlst:
        extract_energy(wfn)

    if '-all' in dlst or '-pop' in dlst:
        extract_pop(wfn)

    if '-all' in dlst or '-auto' in dlst:
        extract_auto(wfn, ints)

    if '-all' in dlst or '-matrices' in dlst:
        extract_matrices(wfn)

    if '-all' in dlst or '-trajectories' in dlst:
        extract_trajectories(wfn)

    if '-all' in dlst or '-interface_data' in dlst:
        extract_interface_data(wfn)

#------------------------------------------------------------------------------------
def extract_spawn():
    """print the spawn table"""
    global chkpt_file

    spawn_data = checkpoint.retrieve_adapt(file_name=chkpt_file)

    for i in range(len(spawn_data)):
        checkpoint.print_wfn_row('spawn', spawn_data[i][:])

#
def extract_energy(wfn):
    """Documentation to come"""
    prnt_data = [wfn.time]

    if 't' in wfn.matrices.avail() and 'v' in wfn.matrices.avail():
        prnt_data.extend([wfn.pot_quantum(),   wfn.kin_quantum(),   
                          wfn.tot_quantum(),
                          wfn.pot_classical(), wfn.kin_classical(), 
                          wfn.tot_classical()])

        checkpoint.print_wfn_row('energy', prnt_data)

#
def extract_pop(wfn):
    """Documentation to come"""

    prnt_data = [wfn.time]
    prnt_data.extend(wfn.pop())
    prnt_data.extend([wfn.norm()])

    checkpoint.print_wfn_row('pop', prnt_data)

    return

#
def extract_auto(wfn, ints):
    """Documentation to come"""
    global wfn0, print_error

    if ints is not None:
        wfn_overlap = ints.wfn_overlap(wfn0, wfn)
        prnt_data = [wfn.time, 
                     wfn_overlap.real, 
                     wfn_overlap.imag, 
                     np.abs(wfn_overlap)]

        checkpoint.print_wfn_row('auto', prnt_data)
    else:
        if print_error:
            print("Can't evaluate auto-correlation function without"+
                  " integrals module")

#
def extract_matrices(wfn):
    """Documentation to come"""
    if wfn.matrices is not None:
        for mat_key in wfn.matrices.avail():
            if mat_key in checkpoint.bfile_names:
                checkpoint.print_wfn_mat(wfn.time, mat_key, 
                                         wfn.matrices.matrix[mat_key])

#
def extract_trajectories(wfn):
    """Documentation to come"""

    for i in range(wfn.nalive):
        traj  = wfn.traj[wfn.alive[i]]
        label = traj.label
        state = traj.state


        # print trajectory file
        prnt_data = [wfn.time]
        prnt_data.extend(traj.x())
        prnt_data.extend(traj.p())
        prnt_data.extend([traj.phase(), traj.amplitude.real, traj.amplitude.imag,
                          np.abs(traj.amplitude), traj.state])
        checkpoint.print_traj_row(label, 'traj', prnt_data)

        # print potential energies
        if traj.check_pes_data('potential'):
            prnt_data = [wfn.time]
            prnt_data.extend([traj.energy(i) for i in range(traj.nstates)])
            checkpoint.print_traj_row(label, 'poten', prnt_data)

        # print gradients
        if traj.check_pes_data('derivative'):
            prnt_data = [wfn.time]
            prnt_data.extend(traj.derivative(traj.state,traj.state))
            checkpoint.print_traj_row(label, 'grad', prnt_data)

        # print coupling
        if traj.check_pes_data('derivative'):
            prnt_data = [wfn.time]
            deriv_coup = [np.linalg.norm(traj.derivative(state,i)) for i in range(traj.nstates)]
            deriv_coup[state] = 0.
            prnt_data.extend(deriv_coup)
            if traj.check_pes_data('coupling'):
                prnt_data.extend([traj.coupling(state,i) for i in range(traj.nstates)])
            else:
                prnt_data.extend([0. for i in range(traj.nstates)])
            checkpoint.print_traj_row(label,'coup', prnt_data)

        # print hessian
        if traj.check_pes_data('hessian'):
            checkpoint.print_traj_mat(wfn.time, 'hessian', traj.hessian(traj.state))

    return
#
def extract_interface_data(wfn):
    """Documentation to come"""

    # extract electronic structure information associated with COLUMBUS
    if glbl.methods['interface'] == 'columbus':

        for i in range(wfn.nalive):
            traj  = wfn.traj[wfn.alive[i]]
            label = traj.label
            state = traj.state
            nst   = traj.nstates
            natm  = int(traj.dim/3)

            # print permanent dipoles
            if 'dipole' in traj.pes.avail_data():
                dipoles = traj.pes.get_data('dipole')
                prnt_data = [wfn.time]
                prnt_data.extend([dipoles[j,k,k] for k in range(nst) for j in range(3)])
                checkpoint.print_traj_row(label,'dipole',prnt_data)

                # print transition dipoles
                prnt_data = [wfn.time]
                tr_dip    = [-1. for j in range(int(nst*(nst-1)*3/2))]
                icnt = 0
                for j in range(nst):
                    for k in range(j):
                        for l in range(3):
                            if k in [0,state] or j==state:
                                tr_dip[icnt] = dipoles[l,k,j]
                            icnt += 1
                prnt_data.extend(tr_dip)
                checkpoint.print_traj_row(label,'tr_dipole',prnt_data)

            # print second moments
            if 'sec_mom' in traj.pes.avail_data():
                sec_mom = traj.pes.get_data('sec_mom')
                prnt_data = [wfn.time]
                prnt_data.extend([sec_mom[j,j,k] for k in range(nst) for j in range(3)])
                checkpoint.print_traj_row(label,'sec_mom',prnt_data)

            # print mulliken populations
            if 'atom_pop' in traj.pes.avail_data():
                atm_pop = traj.pes.get_data('atom_pop')
                prnt_data = [wfn.time]
                prnt_data.extend([atm_pop[j,k] for k in range(nst) for j in range(natm)])
                checkpoint.print_traj_row(label,'atom_pop',prnt_data)


    # extract information associated with vibronic models
    if glbl.methods['interface'] == 'vibronic':
        pass


if __name__ == '__main__':
    # run the main routine
    main()
