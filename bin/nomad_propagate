#!/usr/bin/env python
"""
This is the driver for the hamiltonian propagation. This driver
reads the checkpoint file, passes the trajectory data (in batches,
if need be) to the Hamiltonian propagation routines, which
are written as dynamically loaded libraries
"""
import os
import sys as sys
import h5py as h5py
import ctypes as ctypes
import array as array
import numpy as np
import nomad.core.glbl as glbl
import nomad.core.wavefunction as wavefunction
import nomad.core.checkpoint as checkpoint
import nomad.post.interface.libutils as libutils
import nomad.post.interface.proputils as proputils


chkpt_file    = ''
amp_archive   = ''
ti            = 0.
tf            = 0.
full_basis    = False
save_matrices = False
t_method      = ''
init_method   = ''
int_method    = ''
tstep_methods = ['nascent', 'static']
init_methods  = ['overlap','uniform','explicit']
int_methods   = ['saddle', 'taylor', 'dirac', 'lvc_exact', 'lvc_mca']

def init():
    """Initializes the nomad inputs.

    This must be separate from main so that an error which occurs
    before the input file is created will be written to stdout.
    """

    process_arguments(sys.argv)

def process_arguments(args):
    """Process command line arguments."""
    global chkpt_file, amp_archive, ti, tf
    global full_basis, t_method, t_step, init_method, int_method
    global tstep_methods, init_methods, int_methods, save_matrices

    glbl.paths['cwd']        = os.getcwd()
    glbl.paths['chkpt_file'] = args[1]
    chkpt_file               = args[1]

    if '-o' in sys.argv:
        amp_archive = str(args[args.index('-o')+1])
    else:
        amp_archive = 'amp_archive.hdf5'

    if '-ti' in sys.argv:
        ti = float(args[args.index('-ti')+1])
    else:
        ti = float(0.)

    if '-tf' in sys.argv:
        tf = float(args[args.index('-tf')+1])
    else:
        tf = None 

    if '-timestep' in sys.argv:
        t_step = float(args[args.index('-timestep')+1])
    else:
        t_step = 0.

    if '-propagate' in sys.argv:
        t_method = str(args[args.index('-propagate')+1])
        if t_method not in tstep_methods:
            sys.exit('time step method not recognized')
    else:
        t_method = 'nascent'

    if '-full_basis' in sys.argv:
        full_basis = True
    else:
        full_basis = False

    if '-initial_amps' in sys.argv:
        init_method = str(args[args.index('-initial_amps')+1])
        if init_method not in init_methods:
            sys.exit('initialization approach not recognized')
    else:
        init_method = 'explicit'

    if '-integrals' in sys.argv:
        int_method =  str(args[args.index('-integrals')+1])
        if int_method not in int_methods:
            sys.exit('integration scheme not recognized')
    else:
        int_method = 'taylor'        

    if '-save_matrices' in sys.argv:
        save_matrices = True

    return

#
def main():
    """ main driver routine """
    global chkpt_file, amp_archive, ti, tf
    global full_basis, t_step, t_method, init_method, int_method
    global tstep_methods, init_methods, int_methods, save_matrices

    # load the appropriate library
    #prop_path = os.environ['NOMAD']+'/nomad/analysis/'+prop_class+'.so'
    prop_path = os.environ['NOMAD']+'/nomad/analysis/lib/libpropagate.so'
    ld_libs   = os.environ['LD_LIBRARY_PATH']
    if not os.path.isfile(prop_path):
        raise FileNotFoundError('Hamiltonian library not found: '+prop_path)
    lib_prop = ctypes.cdll.LoadLibrary(prop_path)

    # reset chkpt_file variable to be consistent with the current path
    chkpt = h5py.File(chkpt_file, 'r+', libver='latest')
    checkpoint.read_keywords(chkpt)

    # change the current default checkpoint file path to the checkpoint
     # file we're operating on.
    glbl.paths['chkpt_file'] = chkpt_file

    # pass the various run time options to the propagation library
    if t_step != 0:
        default_step = t_step
        step_method  = tstep_methods.index('static')+1
    else:
        default_step = float(glbl.properties['default_time_step'])
        step_method  = tstep_methods.index(t_method)+1
    init_method  = init_methods.index(init_method)+1
    int_method   = int_methods.index(int_method)+1 

    # initialize the trajectory table
    libutils.init_table(lib_prop, default_step, step_method)

    # initialize the table that holds trajectory amplitudes
    libutils.init_amplitudes(
                 lib_prop, default_step, step_method)   

    # initlize the propagation routines
    proputils.init_propagate(lib_prop, full_basis, init_method)

    # if this is a vibronic hamiltonian, load the hamiltonian into arrays
    # so we can pass it to propagate
    if glbl.methods['interface'] == 'vibronic':
        vibronic  = __import__('nomad.interfaces.'
                            + glbl.methods['interface'],fromlist=['NA'])
        vibronic.init_interface()
        vibronic.ham.mlbl_active  = [lbl.lower() for lbl in glbl.properties['crd_labels']]
        vibronic.ham.nmode_active = len(glbl.properties['crd_labels'])

        alpha = np.asarray(glbl.properties['crd_widths'], dtype=float)
        omega, soterms, foterms, scals = vibronic.ham.package_vibham()
        fo_terms = np.concatenate((foterms[:,0,0],
                                   foterms[:,1,1],
                                   foterms[:,0,1]))
        scalars  = np.asarray( [scals[0,0],
                                scals[1,1],
                                scals[0,1]], dtype=float)
        proputils.init_integrals(lib_prop, 
                          int_method, alpha, omega, fo_terms, scalars)
    else:
        proputils.init_integrals(lib_prop, int_method)

    # create the trajectory table
    kwords = libutils.create_table(lib_prop, chkpt)

    # load the trajectories into the table
    kwords = libutils.load_trajectories(
                 lib_prop, chkpt, kwords, ti, tf)

    # close the current checkpoint file 
    chkpt.close()
   
    # create the amplitude table
    libutils.create_amp_table(lib_prop, kwords)

    # after data is loaded, this is all on the propagation routines
    tstart = ti
    tend   = tf
    if tend is None:
        tend = kwords['tmax']

    proputils.propagate(lib_prop, tstart, tend)

    print("propagate complete", flush=True)

    # once propagation is done, retrieve times, phase-space points and 
    # amplitudes from libprop
    glbl.paths['chkpt_file']          = amp_archive
    glbl.properties['store_matrices'] = save_matrices

    # this is temporary: only two options, fully coherent or fully incoherent
    # in the future: should be able to specify arbitrary groupings of initial
    # conditions
    nbatch  = kwords['nbatch']
    nstates = int(glbl.properties['n_states'])
    if full_basis:
        nbatch = 1

    print('nbatch, batches='+str(nbatch)+','+str(kwords['batches']))
    for ibat in kwords['batches']:
        ibatch = ibat + 1
        if full_basis:
            ibatch = -1 

        print('ibatch='+str(ibatch))

        # retrieve the time-step info from the amplitude table
        time, n_traj, indices = libutils.amp_timestep_info(
                            lib_prop, True, ibatch, kwords['ntotal'])

        print('ntraj='+str(n_traj))
        while n_traj>0:

            # retrieve a list of trajectories
            traj_list = libutils.traj_retrieve_timestep( 
                            lib_prop, kwords, time, ibatch, n_traj)
            amp_list  = libutils.amp_retrieve_timestep(
                            lib_prop, indices)
            pop, norm = proputils.pop_retrieve_timestep(
                            lib_prop, time, ibatch, nstates)

            print('pop,norm='+str(pop)+','+str(norm),flush=True)

            # initialize wfn-level variables
            wfn          = wavefunction.Wavefunction()
            wfn.time     = time 
            wfn.stpop    = pop 
            wfn.wfn_norm = norm

            # add trajectories from list
            for itraj in range(len(traj_list)):
                new_traj = traj_list[itraj]
                new_traj.update_amplitude(amp_list[itraj])
                new_traj.time = time

                # add trajectory to the wavefunction object
                wfn.add_trajectory(new_traj, relabel=False)

            # retrieve the matrices -- maybe useful for analysis
            # however -- these are reconstructed at each time step,
            # if only populations/trajectories desired, you can
            # save a lot of time skipping this step
            if save_matrices:
                mats = proputils.retrieve_matrices(lib_prop, 
                                                time, 
                                                ibatch, 
                                                n_traj, 
                                                nstates)
                wfn.update_matrices(mats)

            # throw this timestep to the new checkpoint file
            checkpoint.archive_simulation(wfn, None)

            # advance to the next time step
            max_step = libutils.amp_next_timestep(lib_prop, indices, n_traj)

            # if we've reached the maximum time step, we're done
            if max_step:
                n_traj = 0
            else:
                # get info on next time step
                time, n_traj, indices = libutils.amp_timestep_info(
                           lib_prop, False, ibatch, kwords['ntotal'])

    return

#   
if __name__ == '__main__':
    # parse command line arguments
    if '-openmp' in sys.argv:
        glbl.mpi['parallel'] = True

    # initialize
    init()

    # run the main routine
    main()

