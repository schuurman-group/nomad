#!/usr/bin/env python
"""
This is the utility to compute the density of a wavefunction
in a basis of phase-space evolving Gaussian functions using
numerical (Monte-Carlo) integration.
The basis data is read from a NOMAD checkpoint file.
The definition of the internal coordinates, as well as the 
integration grid to employ is defined in an input file that
is parsed by this script.
"""
import os
import ast
import math
import sys as sys
import ctypes as ctypes
import h5py as h5py
import numpy as np
import nomad.core.glbl as glbl
import nomad.core.checkpoint as checkpoint
import nomad.analysis.lib_utils as lib_utils
import nomad.analysis.defaults as defaults
import nomad.analysis.fileio as fileio
import nomad.analysis.plot as plot

coord_file  = ''
chkpt_file  = ''
plot_file   = ''
max_states          = 10
max_prim            = 8
max_atoms           = 8*6
time_conv           = 1./41.334
print_density_files = False

def init():
    """Initializes the nomad inputs.

    This must be separate from main so that an error which occurs
    before the input file is created will be written to stdout.
    """

    process_arguments(sys.argv)

def process_arguments(args):
    """Process command line arguments."""
    global input_file, chkpt_file 

    coord_file = str(args[1])

    if '-chkpt' in sys.argv:
        chkpt_file = str(args[args.index('-chkpt')+1])
        glbl.paths['cwd']        = os.getcwd()

    if '-plot' in sys.argv:
        plot_file = str(args[args.index('-plot')+1])
        
    return

#
def main():
    """ main driver routine """
    global input_file, chkpt_file
    global max_states, max_prim, max_atoms
    global print_density_files, time_conv

    den_inp      = defaults.denplot
    input_kwords = parse_input(coord_file)
    # update the defaults if an input file is specified
    if plot_file == '':
        plot_file = defaults.inpname['denplot']
    fileio.cfg_update(den_inp, plot_file)

    # load the appropriate library
    den_path  = os.environ['NOMAD']+'/nomad/analysis/lib_den.so'
    ld_libs   = os.environ['LD_LIBRARY_PATH']
    if not os.path.isfile(den_path):
        raise FileNotFoundError('density library not found: '+den_path)
    lib_den = ctypes.cdll.LoadLibrary(den_path)

    # reset chkpt_file variable to be consistent with the current path
    chkpt = h5py.File(chkpt_file, 'r+', libver='latest')
    checkpoint.read_keywords(chkpt)

    # change the current default checkpoint file path to the checkpoint
    # file we're operating on.
    glbl.paths['chkpt_file'] = chkpt_file

    # pass the various run time options to the propagation library
    default_step = float(glbl.properties['default_time_step'])
    tstep_method = ['nascent', 'static'].index('static')+1
    lib_utils.init_table(lib_den, default_step, tstep_method)

    # create the trajectory table
    kwords = lib_utils.create_table(lib_den, chkpt)

    # initialize the density module by processing input keywords
    den_kwords = parse_input(input_file)
    t_init  = float(den_kwords['tinit'])
    t_final = float(den_kwords['tfinal'])
    t_step  = float(den_kwords['tstep'])
    lib_utils.init_density(
                lib_den, chkpt, den_kwords, max_states, max_prim, max_atoms)

    # load all the trajectories into a library
    kwords = lib_utils.load_trajectories(
                lib_den, chkpt, kwords, t_init, t_final)
  
    # FINALLY -- close the checkpoint file
    chkpt.close()

    # evaluate density at each requested time
    n_intl  = len(den_kwords['coords'])
    npts    = np.array([int(den_kwords['npts'][crd]) for crd in range(n_intl)])
    bnds    = np.zeros(2*n_intl, dtype=float)
    for crd in range(n_intl):
        bnds[2*crd]   = float(den_kwords['bounds'][crd][0])
        bnds[2*crd+1] = float(den_kwords['bounds'][crd][1])
    n_grid      = int(np.prod(npts))

    # if n_intl == 1, plot density vs. time
    if n_intl == 1:
        nt        = math.floor( (t_final - t_init)/t_step ) + 1
        wid       = math.floor( (bnds[1] - bnds[0]) / (npts[0]-1) )
        x_axis    = np.array([t_init +  i*t_step for i in range(nt)], dtype=float)
        y_axis    = np.array([bnds[0] + i*wid for i in range(npts[0])], dtype=float)
        plot_grid = np.zeros((nt, npts[0]), dtype=float)
    # if n_intl == 2, plot coupled density plot for each time step
    if n_intl == 2:
        widx      = math.floor( (bnds[1] - bnds[0]) / (npts[0]-1) )
        widy      = math.floor( (bnds[3] - bnds[2]) / (npts[1]-1) )
        x_axis    = np.array([bnds[0] + i*widx for i in range(npts[0])], dtype=float)
        y_axis    = np.array([bnds[2] + i*widy for i in range(npts[1])], dtype=float)
        plot_grid = np.zeros((npts[0],npts[1]), dtype=float)

    # main loop over the time steps
    den_report = open('nomad_density.out', 'w')
    out_str    = ("time: {:10.4f},"+
                  " total number of trajectories: {:6d},"+
                  " number of Monte-Carlo samples: {:10d},"+
                  " wfn norm: on {:7.4f} / off {:7.4f},"+
                  " convergence: {:10.7f}\n")
    for time in np.arange(t_init, t_final+0.5*t_step, t_step): 

        density, conv, n_sample, n_traj, norm_on, norm_off = \
                        lib_utils.evaluate_density(lib_den, time, npts)
        den_report.write(out_str.format(
                        time, n_traj, n_sample, norm_on, norm_off, conv)) 

        if n_intl == 1:
            t_indx  =  int(round( (time - t_init)/t_step ))
            plot_grid[t_indx, :] = density        
        if n_intl == 2:
            plot_grid = density
            fig, ax = plot.heatmap(x_axis, y_axis, plot_grid, 
                          xlabel=den_inp['coordlbl'], ylabel=ylbl)
            plot.save(inp['plot_name']+'t'+str(time)+'.png', figure=fig)
        if n_intl > 2 or print_density_files:
            print_nd_array('nomad_den.t'+str(time), bnds, npts, density)

    den_report.close()

    if n_intl == 1:
        # plot the density
        fig, ax = plot.heatmap(x_axis, y_axis, plot_grid, 
                          xlabel=den_inp['coordlbl'], ylabel=ylbl)
        plot.save(inp['plot_name'], figure=fig)

    return

# parse the input file
def parse_input(input_file):
    """parse an density file"""

    den_kwords = {'tinit'    :0,    'tfinal'   :0, 'tstep'   :10,
                  'states'   :[0],  'coords'   :[[]],
                  'atoms'    :[[]], 'coefs'    :[[]],
                  'normalize':False,'bounds'   :[[]],
                  'npts'     :[],    'op'       :[]}

    #with open(glbl.paths['home_path'] + fname, 'r') as infile:
    with open(input_file, 'r') as infile:
        den_input = infile.readlines()
    
    for line in den_input:
        for kword in den_kwords.keys():
            if kword in line and '=' in line:
                den_kwords[kword] = ast.literal_eval(line[line.index('=')+1:].strip())  

    return den_kwords

# print a n-column n-D array to file
def print_nd_array(file_name, bounds, npts, grid_values):
    """print an nD-array to file"""
    nd = len(npts)-1  
    bin_wid = [(bounds[2*i+1] - bounds[2*i])/npts[i] for i in range(len(npts))]

    with open(file_name, 'w') as den_file:
        counter     = np.zeros(len(npts), dtype=int)
        counter[nd] = -1
        while sum(counter) < sum(npts-1):
            indx = nd
            while counter[indx] == (npts[indx]-1):
                counter[indx] = 0
                indx         -= 1
            counter[indx] += 1
            
            row_str  = ['{:10.6f}'.format(bounds[2*i] + counter[i]*bin_wid[i])
                                   for i in range(len(npts))]
            row_str += ['{:10.4f}'.format(grid_values[tuple(counter)])]
            den_file.write(' '.join(row_str)+"\n")        

#   
if __name__ == '__main__':
    # parse command line arguments
    if '-openmp' in sys.argv:
        glbl.mpi['parallel'] = True

    # initialize
    init()

    # run the main routine
    main()

